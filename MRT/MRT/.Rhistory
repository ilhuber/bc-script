method = "pls",
trControl = fitControl,
verbose = FALSE,
na.action = na.exclude)
gbmFit2
gbmFit2 <- train(K1 ~ . -ID, data = training,
method = "glmStepAIC",
trControl = fitControl,
verbose = FALSE,
na.action = na.exclude)
gbmFit2
plot(testing$K1[!is.na(testing$SoilpH)],predict(gbmFit2, newdata = testing[!is.na(testing$SoilpH),]),
xlim=c(0,0.08),ylim=c(0,0.08),pch=8,cex=2)
abline(a=0,b=1,lwd=2)
plot(testing$K1[!is.na(testing$SoilpH)],predict(gbmFit2, newdata = testing[!is.na(testing$SoilpH),]),
xlim=c(0,0.08),ylim=c(0,0.08),pch=9,cex=2)
abline(a=0,b=1,lwd=2)
plot(testing$K1[!is.na(testing$SoilpH)],predict(gbmFit2, newdata = testing[!is.na(testing$SoilpH),]),
xlim=c(0,0.08),ylim=c(0,0.08),pch=10,cex=2)
abline(a=0,b=1,lwd=2)
plot(testing$K1[!is.na(testing$SoilpH)],predict(gbmFit2, newdata = testing[!is.na(testing$SoilpH),]),
xlim=c(0,0.08),ylim=c(0,0.08),pch=11,cex=2)
abline(a=0,b=1,lwd=2)
plot(testing$K1[!is.na(testing$SoilpH)],predict(gbmFit2, newdata = testing[!is.na(testing$SoilpH),]),
xlim=c(0,0.08),ylim=c(0,0.08),pch=12,cex=2)
abline(a=0,b=1,lwd=2)
plot(testing$K1[!is.na(testing$SoilpH)],predict(gbmFit2, newdata = testing[!is.na(testing$SoilpH),]),
xlim=c(0,0.08),ylim=c(0,0.08),pch=13,cex=2)
abline(a=0,b=1,lwd=3)
plot(testing$K1[!is.na(testing$SoilpH)],predict(gbmFit2, newdata = testing[!is.na(testing$SoilpH),]),
xlim=c(0,0.08),ylim=c(0,0.08),pch=19,cex=2)
abline(a=0,b=1,lwd=3)
plot(testing$K1[!is.na(testing$SoilpH)],predict(gbmFit2, newdata = testing[!is.na(testing$SoilpH),]),
xlim=c(0,0.08),ylim=c(0,0.08),pch=19,cex=2)
abline(a=0,b=1,lwd=3)
labs(x="Measured")
plot(testing$K1[!is.na(testing$SoilpH)],predict(gbmFit2, newdata = testing[!is.na(testing$SoilpH),]),
xlim=c(0,0.08),ylim=c(0,0.08),pch=19,cex=2,xlab="Measured")
abline(a=0,b=1,lwd=3)
plot(testing$K1[!is.na(testing$SoilpH)],predict(gbmFit2, newdata = testing[!is.na(testing$SoilpH),]),
xlim=c(0,0.08),ylim=c(0,0.08),pch=19,cex=2,xlab="Measured",ylab="Simulated")
abline(a=0,b=1,lwd=3)
gbmFit2$finalModel
gbmFit2 <- train(K1 ~ .^2, data = training,
method = "glmStepAIC",
trControl = fitControl,
verbose = FALSE,
na.action = na.exclude)
gbmFit2$finalModel
plot(testing$K1[!is.na(testing$SoilpH)],predict(gbmFit2, newdata = testing[!is.na(testing$SoilpH),]),
xlim=c(0,0.08),ylim=c(0,0.08),pch=19,cex=2,xlab="Measured",ylab="Simulated")
abline(a=0,b=1,lwd=3)
gbmFit2
gbmFit2 <- train(1/K1 ~ .^2, data = training,
method = "glmStepAIC",
trControl = fitControl,
verbose = FALSE,
na.action = na.exclude)
gbmFit2
1/0.11
gbmFit2 <- train(1/K1 ~ ., data = training,
method = "glmStepAIC",
trControl = fitControl,
verbose = FALSE,
na.action = na.exclude)
gbmFit2$finalModel
?train
##### Training options
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 10,
repeats = 3,
allowParallel=T)  ## repeated ten times
rm(gbmFit1)
gbmFit2 <- train(1/K1 ~ ., data = training,
method = "glmStepAIC",
trControl = fitControl,
verbose = FALSE,
na.action = na.exclude)
gbmFit2$finalModel
gbmFit2
gbmFit2 <- train(1/K1 ~ .-ID, data = training,
method = "glmStepAIC",
trControl = fitControl,
verbose = FALSE,
na.action = na.exclude)
gbmFit2$finalModel
gbmFit2
gbmFit2 <- train(1/K1 ~ .^2 -ID, data = training,
method = "glmStepAIC",
trControl = fitControl,
verbose = FALSE,
na.action = na.exclude)
gbmFit2
plot(testing$K1[!is.na(testing$SoilpH)],predict(gbmFit2, newdata = testing[!is.na(testing$SoilpH),]),
xlim=c(0,0.08),ylim=c(0,0.08),pch=19,cex=2,xlab="Measured",ylab="Simulated")
abline(a=0,b=1,lwd=3)
plot(testing$K1[!is.na(testing$SoilpH)],predict(gbmFit2, newdata = testing[!is.na(testing$SoilpH),]),
xlim=c(0,2000),ylim=c(0,2000),pch=19,cex=2,xlab="Measured",ylab="Simulated")
abline(a=0,b=1,lwd=3)
plot(testing$K1[!is.na(testing$SoilpH)],predict(gbmFit2, newdata = testing[!is.na(testing$SoilpH),]),
xlim=c(0,500),ylim=c(0,2000),pch=19,cex=2,xlab="Measured",ylab="Simulated")
abline(a=0,b=1,lwd=3)
plot(testing$K1[!is.na(testing$SoilpH)],predict(gbmFit2, newdata = testing[!is.na(testing$SoilpH),]),
xlim=c(0,500),ylim=c(0,500),pch=19,cex=2,xlab="Measured",ylab="Simulated")
abline(a=0,b=1,lwd=3)
plot(1/testing$K1[!is.na(testing$SoilpH)],predict(gbmFit2, newdata = testing[!is.na(testing$SoilpH),]),
xlim=c(0,2000),ylim=c(0,2000),pch=19,cex=2,xlab="Measured",ylab="Simulated")
abline(a=0,b=1,lwd=3)
plot(1/testing$K1[!is.na(testing$SoilpH)],predict(gbmFit2, newdata = testing[!is.na(testing$SoilpH),]),
xlim=c(0,500),ylim=c(0,500),pch=19,cex=2,xlab="Measured",ylab="Simulated")
abline(a=0,b=1,lwd=3)
plot(1/testing$K1[!is.na(testing$SoilpH)],predict(gbmFit2, newdata = testing[!is.na(testing$SoilpH),]),
xlim=c(0,300),ylim=c(0,300),pch=19,cex=2,xlab="Measured",ylab="Simulated")
abline(a=0,b=1,lwd=3)
1/testing$K1[!is.na(testing$SoilpH)]
predict(gbmFit2, newdata = testing[!is.na(testing$SoilpH),])
gbmFit2 <- train(K1 ~ . -ID, data = training,
method = "glmStepAIC",
trControl = fitControl,
verbose = FALSE,
na.action = na.exclude)
gbmFit2$finalModel
predict(gbmFit2, newdata = testing)
plot(testing$K1[!is.na(testing$SoilpH)],predict(gbmFit2, newdata = testing[!is.na(testing$SoilpH),]),
xlim=c(0,300),ylim=c(0,300),pch=19,cex=2,xlab="Measured",ylab="Simulated")
abline(a=0,b=1,lwd=3)
plot(testing$K1[!is.na(testing$SoilpH)],predict(gbmFit2, newdata = testing[!is.na(testing$SoilpH),]),
xlim=c(0,0.08),ylim=c(0,0.08),pch=19,cex=2,xlab="Measured",ylab="Simulated")
abline(a=0,b=1,lwd=3)
gbmFit2
mean(predict(gbmFit2, newdata = testing))
mean(testing$K1[!is.na(testing$SoilpH)])
gbmFit2
gbmFit2$finalModel
plot(gbmFit2)
##traning
gbmFit2 <- train(K1 ~ Biomass:Temp -ID, data = training,
method = "glmStepAIC",
trControl = fitControl,
verbose = FALSE,
na.action = na.exclude)
gbmFit2$finalModel
## model outputs
gbmFit2
##traning
gbmFit2 <- train(K1 ~ Biomass:Temp -ID, data = training,
method = "glm",
trControl = fitControl,
verbose = FALSE,
na.action = na.exclude)
gbmFit2$finalModel
## model outputs
gbmFit2
library(tidyverse)
library(ggplot2)
library(caret)
#################################
dataf<-read.csv("../MRT data.csv")
dataf$ID<-1:nrow(dataf)
names(dataf)
dataf<-read.csv("../MRT data.csv")
dataf$ID<-1:nrow(dataf)
dataf<-dataf%>%dplyr::select(ID,SoilpH,Clay,Sand,Corg,Biomass,Temp,K1,K2)
### Partitioning
set.seed(998)
inTraining <- createDataPartition(dataf$ID, p = .75, list = FALSE)
training <- dataf[ inTraining,]
testing  <- dataf[-inTraining,]
##### Training options
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 10,
repeats = 3,
allowParallel=T)  ## repeated ten times
rm(gbmFit1)
##traning
gbmFit2 <- train(K1 ~ Biomass:Temp -c(ID,K2), data = training,
method = "glm",
trControl = fitControl,
verbose = FALSE,
na.action = na.exclude)
gbmFit2$finalModel
## model outputs
gbmFit2
dataf<-read.csv("../MRT data.csv")
dataf$ID<-1:nrow(dataf)
dataf<-dataf%>%dplyr::select(ID,SoilpH,Clay,Sand,Corg,Biomass,Temp,K1,K2)
### Partitioning
set.seed(998)
inTraining <- createDataPartition(dataf$ID, p = .75, list = FALSE)
training <- dataf[ inTraining,]
testing  <- dataf[-inTraining,]
##### Training options
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 10,
repeats = 3,
allowParallel=T)  ## repeated ten times
rm(gbmFit1)
##traning
gbmFit2 <- train(K1 ~ Biomass:Temp -c(ID,K2), data = training,
method = "glm",
trControl = fitControl,
verbose = FALSE,
na.action = na.exclude)
gbmFit2$finalModel
## model outputs
gbmFit2
##traning
gbmFit2 <- train(K1 ~ Biomass:Temp -ID-K2, data = training,
method = "glm",
trControl = fitControl,
verbose = FALSE,
na.action = na.exclude)
gbmFit2 <- train(K1 ~ Biomass:Temp -ID-K2, data = training,
method = "glmStepAIC",
trControl = fitControl,
verbose = FALSE,
na.action = na.exclude)
gbmFit2$finalModel
## model outputs
gbmFit2
gbmFit2 <- train(K1 ~ . -ID-K2, data = training,
method = "glmStepAIC",
trControl = fitControl,
verbose = FALSE,
na.action = na.exclude)
gbmFit2$finalModel
## model outputs
gbmFit2
##traning
gbmFit2 <- train(K1 ~ . -ID-K2, data = training,
method = "glmStepAIC",
trControl = fitControl,
verbose = FALSE,
na.action = na.exclude,
family=gaussian(link = c("log","identity")),
metric="roc")
##traning
gbmFit2 <- train(K1 ~ . -ID-K2, data = training,
method = "glmStepAIC",
trControl = fitControl,
verbose = FALSE,
na.action = na.exclude,
family=gaussian(link = c("log","identity")))
##traning
gbmFit2 <- train(K1 ~ . -ID-K2, data = training,
method = "glmStepAIC",
trControl = fitControl,
verbose = FALSE,
na.action = na.exclude,
family=gaussian(link = identity))
gbmFit2
gbmFit2 <- train(K1 ~ . -ID-K2, data = training,
method = "glmStepAIC",
trControl = fitControl,
verbose = FALSE,
na.action = na.exclude,
family=gaussian(link = log))
gbmFit2$finalModel
## model outputs
gbmFit2
gbmFit2 <- train(K1 ~ . -ID-K2, data = training,
method = "glmStepAIC",
trControl = fitControl,
verbose = FALSE,
na.action = na.exclude,
family=gaussian(link = c(log,identity)))
##traning
gbmFit2 <- train(K1 ~ . -ID-K2, data = training,
method = "glmStepAIC",
trControl = fitControl,
verbose = FALSE,
na.action = na.exclude,
family=gaussian(link =identity))
gbmFit2
##traning glm with identity link function
glmiden <- train(K1 ~ . -ID-K2, data = training,
method = "glmStepAIC",
trControl = fitControl,
verbose = FALSE,
na.action = na.exclude,
family=gaussian(link =identity))
##traning glm with identity link function and second order
glmiden2 <- train(K1 ~ .^2 -ID-K2, data = training,
method = "glmStepAIC",
trControl = fitControl,
verbose = FALSE,
na.action = na.exclude,
family=gaussian(link =identity))
##traning glm with log link function
glmlog <- train(K1 ~ . -ID-K2, data = training,
method = "glmStepAIC",
trControl = fitControl,
verbose = FALSE,
na.action = na.exclude,
family=gaussian(link =log))
##traning glm with log link function and second order
glmlog2 <- train(K1 ~ .^2 -ID-K2, data = training,
method = "glmStepAIC",
trControl = fitControl,
verbose = FALSE,
na.action = na.exclude,
family=gaussian(link =log))
glmiden
glmiden2
glmlog
glmlog2
##traning glm with log link function and second order
glmlog2 <- train(K1 ~ .^2 -ID-K2, data = training,
method = "glmStepAIC",
trControl = fitControl,
verbose = FALSE,
na.action = na.exclude,
family=gaussian(link =log))
### Diagnostics
resamps <- resamples(list(GLMI = glmiden,
GLMI2 = glmiden2,
GLML = glmlog
# GLML2=glmlog2
))
resamps
trellis.par.set(theme1)
bwplot(resamps, layout = c(3, 1))
##traning glm with log link function and second order
glmlog2 <- train(K1 ~ .^2 -ID-K2, data = training,
method = "glmStepAIC",
trControl = fitControl,
verbose = FALSE,
na.action = na.exclude,
family=gaussian(link =log),
metric = "ROC")
glmlog <- train(K1 ~ . -ID-K2, data = training,
method = "glmStepAIC",
trControl = fitControl,
verbose = FALSE,
na.action = na.exclude,
family=gaussian(link =log),
metric = "ROC")
##### Training options
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 10,
repeats = 3,
allowParallel=T,
classProbs = TRUE)  ## repeated ten times
##traning glm with log link function
glmlog <- train(K1 ~ . -ID-K2, data = training,
method = "glmStepAIC",
trControl = fitControl,
verbose = FALSE,
na.action = na.exclude,
family=gaussian(link =log),
metric = "ROC")
##### Training options
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 10,
repeats = 3,
allowParallel=T)  ## repeated ten times
bwplot(resamps, layout = c(2, 1))
?bwplot
bwplot(resamps, layout = c(2, 1),xlim=c(0,1))
bwplot(resamps, layout = c(2, 1),xlim=c(0,2))
?resamples
### Diagnostics
resamps <- resamples(list(GLMI = glmiden,
GLMI2 = glmiden2,
GLML = glmlog ))
trellis.par.set(theme1)
bwplot(resamps, layout = c(2, 1),xlim=c(0,2))
trellis.par.set(caretTheme())
bwplot(resamps, layout = c(2, 1),xlim=c(0,2))
bwplot(resamps, layout = c(2, 1),xlim=c(0,3))
bwplot(resamps, layout = c(2, 1),xlim=c(0,30))
bwplot(resamps, layout = c(2, 1),xlim=c(0,10))
bwplot(resamps, layout = c(2, 1),xlim=c(0,5))
bwplot(resamps, layout = c(2, 1),xlim=c(0,4))
bwplot(resamps, layout = c(2, 1),xlim=c(0,3))
bwplot(resamps, layout = c(2, 1),xlim=c(0,3.2))
##traning glm with identity link function
log.glmiden <- train(log(K1) ~ . -ID-K2, data = training,
method = "glmStepAIC",
trControl = fitControl,
verbose = FALSE,
na.action = na.exclude,
family=gaussian(link =identity))
##traning glm with identity link function
sqrt.glmiden <- train(sqrt(K1) ~ . -ID-K2, data = training,
method = "glmStepAIC",
trControl = fitControl,
verbose = FALSE,
na.action = na.exclude,
family=gaussian(link =identity))
### Diagnostics
resamps <- resamples(list(GLMI = glmiden,
GLMI2 = glmiden2,
GLML = glmlog,
LOG.G=log.glmiden,
SQGLMI=sqrt.glmiden))
trellis.par.set(caretTheme())
bwplot(resamps, layout = c(2, 1),xlim=c(0,3.2))
#1VS1
plot(testing$K1[!is.na(testing$SoilpH)],
predict(glmiden, newdata = testing[!is.na(testing$SoilpH),]),
xlim=c(0,0.08),ylim=c(0,0.08),pch=19,cex=2,xlab="Measured",ylab="Simulated")
abline(a=0,b=1,lwd=3)
library(tidyverse)
library(caret)
#################################
dataf<-read.csv("../MRT data.csv")
dataf$ID<-1:nrow(dataf)
dataf<-dataf%>%dplyr::select(ID,SoilpH,Clay,Sand,Corg,Biomass,Temp,K1,K2)
### Partitioning
set.seed(998)
inTraining <- createDataPartition(dataf$ID, p = .75, list = FALSE)
training <- dataf[ inTraining,]
testing  <- dataf[-inTraining,]
##### Training options
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 10,
repeats = 3,
allowParallel=T)  ## repeated ten times
#############################
############ Here I will try different models and then
############ I will compare my models
#######################################################
#1#traning glm with identity link function - log transform
log.glmiden <- train(log(K2) ~ . -ID-K1, data = training,
method = "glmStepAIC",
trControl = fitControl,
verbose = FALSE,
na.action = na.exclude,
family=gaussian(link =identity))
#2#traning glm with identity link function - sqrt transform
sqrt.glmiden <- train(sqrt(K2) ~ . -ID-K1, data = training,
method = "glmStepAIC",
trControl = fitControl,
verbose = FALSE,
na.action = na.exclude,
family=gaussian(link =identity))
#3#traning glm with identity link function
glmiden <- train(K2 ~ . -ID-K1, data = training,
method = "glmStepAIC",
trControl = fitControl,
verbose = FALSE,
na.action = na.exclude,
family=gaussian(link =identity))
#4#traning glm with identity link function and second order
glmiden2 <- train(K2 ~ .^2 -ID-K1, data = training,
method = "glmStepAIC",
trControl = fitControl,
verbose = FALSE,
na.action = na.exclude,
family=gaussian(link =identity))
#5#traning glm with log link function
glmlog <- train(K2 ~ . -ID-K1, data = training,
method = "glmStepAIC",
trControl = fitControl,
verbose = FALSE,
na.action = na.exclude,
family=gaussian(link =log))
##########################################
################### Diagnostics-comparison
###########################################
resamps <- resamples(list(GLMI = glmiden,
GLMI2 = glmiden2,
GLML = glmlog,
LOG.G=log.glmiden,
SQGLMI=sqrt.glmiden))
resamps <- resamples(list(GLMI = glmiden,
GLMI2 = glmiden2,
GLML = glmlog,
LOG.G=log.glmiden,
SQGLMI=sqrt.glmiden))
trellis.par.set(caretTheme())
bwplot(resamps, layout = c(2, 1),xlim=c(0,3.2))
glmiden
sqrt.glmiden
log.glmiden
resamps
plot(testing$K1[!is.na(testing$SoilpH)],
predict(glmiden, newdata = testing[!is.na(testing$SoilpH),]),
xlim=c(0,0.08),ylim=c(0,0.08),pch=19,cex=2,xlab="Measured",ylab="Simulated")
abline(a=0,b=1,lwd=3)
#1VS1
plot(testing$K2[!is.na(testing$SoilpH)],
predict(glmiden, newdata = testing[!is.na(testing$SoilpH),]),
xlim=c(0,0.08),ylim=c(0,0.08),pch=19,cex=2,xlab="Measured",ylab="Simulated")
abline(a=0,b=1,lwd=3)
testing$K2[!is.na(testing$SoilpH)]
mean(testing$K2[!is.na(testing$SoilpH)])
max(testing$K2[!is.na(testing$SoilpH)])
#1VS1
plot(testing$K2[!is.na(testing$SoilpH)],
predict(glmiden, newdata = testing[!is.na(testing$SoilpH),]),
xlim=c(0,0.008),ylim=c(0,0.008),pch=19,cex=2,xlab="Measured",ylab="Simulated")
abline(a=0,b=1,lwd=3)
#1VS1
plot(testing$K2[!is.na(testing$SoilpH)],
predict(glmiden, newdata = testing[!is.na(testing$SoilpH),]),
xlim=c(0,0.006),ylim=c(0,0.006),pch=19,cex=2,xlab="Measured",ylab="Simulated")
abline(a=0,b=1,lwd=3)
predict(glmiden, newdata = testing[!is.na(testing$SoilpH),])
#1VS1
plot(testing$K2[!is.na(testing$SoilpH)],
predict(glmiden, newdata = testing[!is.na(testing$SoilpH),]),
xlim=c(0,0.005),ylim=c(0,0.005),pch=19,cex=2,xlab="Measured",ylab="Simulated")
abline(a=0,b=1,lwd=3)
glmiden
